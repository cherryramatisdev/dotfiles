!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/cherry/git/dotfiles/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
$schema	.luarc.json	/^    "$schema": "https:\/\/raw.githubusercontent.com\/sumneko\/vscode-lua\/master\/setting\/schem/;"	s
0	.luarc.json	/^        "undefined-global"$/;"	s	array:Lua.diagnostics.disable
<A-->	vim/config/after/plugin/fontsize.vim	/^nmap <silent> <A-->  <Plug>FontsizeDec$/;"	m
<A-0>	vim/config/after/plugin/fontsize.vim	/^nmap <silent> <A-0>  <Plug>FontsizeDefault$/;"	m
<A-=>	vim/config/after/plugin/fontsize.vim	/^nmap <silent> <A-=>  <Plug>FontsizeInc$/;"	m
<A-o>	vim/config/after/plugin/openbrowser.vim	/^nmap <A-o> <plug>(openbrowser-smart-search)$/;"	m
<C-e>	vim/config/after/plugin/nerdtree.vim	/^nnoremap <C-e> <cmd>NERDTreeToggle<cr>$/;"	m
<C-f>	vim/config/after/plugin/nerdtree.vim	/^nnoremap <C-f> <cmd>NERDTreeFind<cr>$/;"	m
<C-g>	vim/config/after/plugin/finder.vim	/^nnoremap <C-g> <cmd>Rg<cr>$/;"	m
<C-p>	vim/config/after/plugin/finder.vim	/^nnoremap <C-p> <cmd>GFiles<cr>$/;"	m
<leader>nt	vim/config/plugin/mappings.vim	/^nnoremap <leader>nt :<C-u>tabnew<cr>:pwd<cr>:VimShellCreate<cr>$/;"	m
<leader>q	vim/config/plugin/mappings.vim	/^nnoremap <leader>q <cmd>call <SID>QuitWindow()<cr>$/;"	m
<leader>r	vim/config/after/plugin/runner.vim	/^nnoremap <leader>r <cmd>QuickRun<cr>$/;"	m
<leader>t	vim/config/plugin/mappings.vim	/^nnoremap <leader>t :<C-u>:pwd<cr>:VimShell<cr>$/;"	m
<leader>w	vim/config/plugin/mappings.vim	/^nnoremap <leader>w <cmd>w<cr>$/;"	m
@	nvim/config/after/plugin/functions.vim	/^xnoremap @ :<C-u>call ExecuteMacroOverVisualRange()<CR>$/;"	m
COMPREPLY=	.git-completion.bash	/^	COMPREPLY=()$/;"	f
Description	kmonad/kmonad.service	/^Description=kmonad keyboard config$/;"	k	section:Unit
EOF	scripts/trans	/^read -r -d '' TRANS_MANPAGE << 'EOF'$/;"	h
EOF	scripts/trans	/^read -r -d '' TRANS_PROGRAM << 'EOF'$/;"	h
ExecStart	kmonad/kmonad.service	/^ExecStart=\/home\/cherry\/.local\/share\/bin\/kmonad \/home\/cherry\/git\/dotfiles\/kmonad\/keyb/;"	k	section:Service
ExecuteMacroOverVisualRange	nvim/config/after/plugin/functions.vim	/^function! ExecuteMacroOverVisualRange()$/;"	f
Gf	nvim/config/plugin/gf-resolution.vim	/^function! Gf()$/;"	f
H	vim/config/plugin/mappings.vim	/^nnoremap H gT$/;"	m
Install	kmonad/kmonad.service	/^[Install]$/;"	s
L	vim/config/plugin/mappings.vim	/^nnoremap L gt$/;"	m
Lua.diagnostics.disable	.luarc.json	/^    "Lua.diagnostics.disable": [$/;"	a
Nice	kmonad/kmonad.service	/^Nice=-20$/;"	k	section:Service
P	nvim/config/lua/cherry/globals.lua	/^P = function(v)$/;"	f
R	nvim/config/lua/cherry/globals.lua	/^R = function(name)$/;"	f
RELOAD	nvim/config/lua/cherry/globals.lua	/^RELOAD = function(...)$/;"	f
Restart	kmonad/kmonad.service	/^Restart=always$/;"	k	section:Service
RestartSec	kmonad/kmonad.service	/^RestartSec=3$/;"	k	section:Service
Service	kmonad/kmonad.service	/^[Service]$/;"	s
Unit	kmonad/kmonad.service	/^[Unit]$/;"	s
Usage	README.md	/^## Usage$/;"	s	chapter:Welcome to my dotfiles
WantedBy	kmonad/kmonad.service	/^WantedBy=default.target$/;"	k	section:Install
Welcome to my dotfiles	README.md	/^# Welcome to my dotfiles$/;"	c
["<C-w>"]	nvim/config/lua/cherry/telescope/setup.lua	/^        ["<C-w>"] = function()$/;"	f
___git_complete	.git-completion.bash	/^___git_complete ()$/;"	f
__git	.git-completion.bash	/^__git ()$/;"	f
__git_aliased_command	.git-completion.bash	/^__git_aliased_command ()$/;"	f
__git_checkout_default_dwim_mode	.git-completion.bash	/^__git_checkout_default_dwim_mode ()$/;"	f
__git_complete	.git-completion.bash	/^__git_complete ()$/;"	f
__git_complete_command	.git-completion.bash	/^__git_complete_command () {$/;"	f
__git_complete_common	.git-completion.bash	/^__git_complete_common () {$/;"	f
__git_complete_config_variable_name	.git-completion.bash	/^__git_complete_config_variable_name ()$/;"	f
__git_complete_config_variable_name_and_value	.git-completion.bash	/^__git_complete_config_variable_name_and_value ()$/;"	f
__git_complete_config_variable_value	.git-completion.bash	/^__git_complete_config_variable_value ()$/;"	f
__git_complete_fetch_refspecs	.git-completion.bash	/^__git_complete_fetch_refspecs ()$/;"	f
__git_complete_file	.git-completion.bash	/^__git_complete_file ()$/;"	f
__git_complete_force_with_lease	.git-completion.bash	/^__git_complete_force_with_lease ()$/;"	f
__git_complete_index_file	.git-completion.bash	/^__git_complete_index_file ()$/;"	f
__git_complete_refs	.git-completion.bash	/^__git_complete_refs ()$/;"	f
__git_complete_remote_or_refspec	.git-completion.bash	/^__git_complete_remote_or_refspec ()$/;"	f
__git_complete_revlist	.git-completion.bash	/^__git_complete_revlist ()$/;"	f
__git_complete_revlist_file	.git-completion.bash	/^__git_complete_revlist_file ()$/;"	f
__git_complete_strategy	.git-completion.bash	/^__git_complete_strategy ()$/;"	f
__git_complete_symbol	.git-completion.bash	/^__git_complete_symbol () {$/;"	f
__git_complete_worktree_paths	.git-completion.bash	/^__git_complete_worktree_paths ()$/;"	f
__git_compute_all_commands	.git-completion.bash	/^__git_compute_all_commands ()$/;"	f
__git_compute_config_sections	.git-completion.bash	/^__git_compute_config_sections ()$/;"	f
__git_compute_config_vars	.git-completion.bash	/^__git_compute_config_vars ()$/;"	f
__git_compute_merge_strategies	.git-completion.bash	/^__git_compute_merge_strategies ()$/;"	f
__git_config_get_set_variables	.git-completion.bash	/^__git_config_get_set_variables ()$/;"	f
__git_count_arguments	.git-completion.bash	/^__git_count_arguments ()$/;"	f
__git_dequote	.git-completion.bash	/^__git_dequote ()$/;"	f
__git_dwim_remote_heads	.git-completion.bash	/^__git_dwim_remote_heads ()$/;"	f
__git_find_last_on_cmdline	.git-completion.bash	/^__git_find_last_on_cmdline ()$/;"	f
__git_find_on_cmdline	.git-completion.bash	/^__git_find_on_cmdline ()$/;"	f
__git_find_repo_path	.git-completion.bash	/^__git_find_repo_path ()$/;"	f
__git_func_wrap	.git-completion.bash	/^__git_func_wrap ()$/;"	f
__git_get_config_variables	.git-completion.bash	/^__git_get_config_variables ()$/;"	f
__git_get_option_value	.git-completion.bash	/^__git_get_option_value ()$/;"	f
__git_has_doubledash	.git-completion.bash	/^__git_has_doubledash ()$/;"	f
__git_have_func	.git-completion.bash	/^__git_have_func () {$/;"	f
__git_heads	.git-completion.bash	/^__git_heads ()$/;"	f
__git_index_files	.git-completion.bash	/^__git_index_files ()$/;"	f
__git_is_configured_remote	.git-completion.bash	/^__git_is_configured_remote ()$/;"	f
__git_list_merge_strategies	.git-completion.bash	/^__git_list_merge_strategies ()$/;"	f
__git_ls_files_helper	.git-completion.bash	/^__git_ls_files_helper ()$/;"	f
__git_main	.git-completion.bash	/^__git_main ()$/;"	f
__git_match_ctag	.git-completion.bash	/^__git_match_ctag () {$/;"	f
__git_pretty_aliases	.git-completion.bash	/^__git_pretty_aliases ()$/;"	f
__git_reassemble_comp_words_by_ref	.git-completion.bash	/^__git_reassemble_comp_words_by_ref()$/;"	f
__git_refs	.git-completion.bash	/^__git_refs ()$/;"	f
__git_refs2	.git-completion.bash	/^__git_refs2 ()$/;"	f
__git_refs_remotes	.git-completion.bash	/^__git_refs_remotes ()$/;"	f
__git_remote_heads	.git-completion.bash	/^__git_remote_heads ()$/;"	f
__git_remotes	.git-completion.bash	/^__git_remotes ()$/;"	f
__git_support_parseopt_helper	.git-completion.bash	/^__git_support_parseopt_helper () {$/;"	f
__git_tags	.git-completion.bash	/^__git_tags ()$/;"	f
__gitcomp	.git-completion.bash	/^__gitcomp ()$/;"	f
__gitcomp_builtin	.git-completion.bash	/^__gitcomp_builtin ()$/;"	f
__gitcomp_direct	.git-completion.bash	/^__gitcomp_direct ()$/;"	f
__gitcomp_direct_append	.git-completion.bash	/^__gitcomp_direct_append ()$/;"	f
__gitcomp_file	.git-completion.bash	/^__gitcomp_file ()$/;"	f
__gitcomp_file_direct	.git-completion.bash	/^__gitcomp_file_direct ()$/;"	f
__gitcomp_nl	.git-completion.bash	/^__gitcomp_nl ()$/;"	f
__gitcomp_nl_append	.git-completion.bash	/^__gitcomp_nl_append ()$/;"	f
__gitcompadd	.git-completion.bash	/^__gitcompadd ()$/;"	f
__gitcompappend	.git-completion.bash	/^__gitcompappend ()$/;"	f
__gitdir	.git-completion.bash	/^__gitdir ()$/;"	f
__gitk_main	.git-completion.bash	/^__gitk_main ()$/;"	f
_add_figure	scripts/zet	/^_add_figure() {$/;"	f
_alternatives	scripts/zet	/^_alternatives() {$/;"	f
_buffer	scripts/zet	/^_buffer() {$/;"	f
_checkdep	scripts/zet	/^_checkdep() {$/;"	f
_config_del	scripts/zet	/^_config_del() {$/;"	f
_config_dir	scripts/zet	/^_config_dir() {$/;"	f
_config_dump	scripts/zet	/^_config_dump() {$/;"	f
_config_edit	scripts/zet	/^_config_edit() {$/;"	f
_config_get	scripts/zet	/^_config_get() { $/;"	f
_config_keys	scripts/zet	/^_config_keys() { printf "%s\\n" "${!CONF[@]}"; }$/;"	f
_config_path	scripts/zet	/^_config_path() { $/;"	f
_config_read	scripts/zet	/^_config_read() {$/;"	f
_config_set	scripts/zet	/^_config_set() {$/;"	f
_config_vals	scripts/zet	/^_config_vals() { printf "%s\\n" "${CONF[@]}"; }$/;"	f
_config_write	scripts/zet	/^_config_write() {$/;"	f
_figure_name	scripts/zet	/^_figure_name() {$/;"	f
_filter	scripts/zet	/^_filter(){$/;"	f
_format_task	scripts/track	/^_format_task () {$/;"	f
_get_comp_words_by_ref	.git-completion.bash	/^_get_comp_words_by_ref ()$/;"	f
_get_difference	scripts/track	/^_get_difference () {$/;"	f
_get_label	scripts/track	/^_get_label () {$/;"	f
_get_seconds	scripts/track	/^_get_seconds () {$/;"	f
_get_time	scripts/track	/^_get_time () {$/;"	f
_git_add	.git-completion.bash	/^_git_add ()$/;"	f
_git_am	.git-completion.bash	/^_git_am ()$/;"	f
_git_apply	.git-completion.bash	/^_git_apply ()$/;"	f
_git_archive	.git-completion.bash	/^_git_archive ()$/;"	f
_git_bisect	.git-completion.bash	/^_git_bisect ()$/;"	f
_git_branch	.git-completion.bash	/^_git_branch ()$/;"	f
_git_bundle	.git-completion.bash	/^_git_bundle ()$/;"	f
_git_checkout	.git-completion.bash	/^_git_checkout ()$/;"	f
_git_cherry_pick	.git-completion.bash	/^_git_cherry_pick ()$/;"	f
_git_clean	.git-completion.bash	/^_git_clean ()$/;"	f
_git_clone	.git-completion.bash	/^_git_clone ()$/;"	f
_git_commit	.git-completion.bash	/^_git_commit ()$/;"	f
_git_config	.git-completion.bash	/^_git_config ()$/;"	f
_git_describe	.git-completion.bash	/^_git_describe ()$/;"	f
_git_diff	.git-completion.bash	/^_git_diff ()$/;"	f
_git_difftool	.git-completion.bash	/^_git_difftool ()$/;"	f
_git_fetch	.git-completion.bash	/^_git_fetch ()$/;"	f
_git_format_patch	.git-completion.bash	/^_git_format_patch ()$/;"	f
_git_fsck	.git-completion.bash	/^_git_fsck ()$/;"	f
_git_gitk	.git-completion.bash	/^_git_gitk ()$/;"	f
_git_grep	.git-completion.bash	/^_git_grep ()$/;"	f
_git_help	.git-completion.bash	/^_git_help ()$/;"	f
_git_init	.git-completion.bash	/^_git_init ()$/;"	f
_git_log	.git-completion.bash	/^_git_log ()$/;"	f
_git_ls_files	.git-completion.bash	/^_git_ls_files ()$/;"	f
_git_ls_remote	.git-completion.bash	/^_git_ls_remote ()$/;"	f
_git_ls_tree	.git-completion.bash	/^_git_ls_tree ()$/;"	f
_git_merge	.git-completion.bash	/^_git_merge ()$/;"	f
_git_merge_base	.git-completion.bash	/^_git_merge_base ()$/;"	f
_git_mergetool	.git-completion.bash	/^_git_mergetool ()$/;"	f
_git_mv	.git-completion.bash	/^_git_mv ()$/;"	f
_git_notes	.git-completion.bash	/^_git_notes ()$/;"	f
_git_pull	.git-completion.bash	/^_git_pull ()$/;"	f
_git_push	.git-completion.bash	/^_git_push ()$/;"	f
_git_range_diff	.git-completion.bash	/^_git_range_diff ()$/;"	f
_git_rebase	.git-completion.bash	/^_git_rebase ()$/;"	f
_git_reflog	.git-completion.bash	/^_git_reflog ()$/;"	f
_git_remote	.git-completion.bash	/^_git_remote ()$/;"	f
_git_replace	.git-completion.bash	/^_git_replace ()$/;"	f
_git_rerere	.git-completion.bash	/^_git_rerere ()$/;"	f
_git_reset	.git-completion.bash	/^_git_reset ()$/;"	f
_git_restore	.git-completion.bash	/^_git_restore ()$/;"	f
_git_revert	.git-completion.bash	/^_git_revert ()$/;"	f
_git_rm	.git-completion.bash	/^_git_rm ()$/;"	f
_git_send_email	.git-completion.bash	/^_git_send_email ()$/;"	f
_git_shortlog	.git-completion.bash	/^_git_shortlog ()$/;"	f
_git_show	.git-completion.bash	/^_git_show ()$/;"	f
_git_show_branch	.git-completion.bash	/^_git_show_branch ()$/;"	f
_git_sparse_checkout	.git-completion.bash	/^_git_sparse_checkout ()$/;"	f
_git_stage	.git-completion.bash	/^_git_stage ()$/;"	f
_git_stash	.git-completion.bash	/^_git_stash ()$/;"	f
_git_status	.git-completion.bash	/^_git_status ()$/;"	f
_git_submodule	.git-completion.bash	/^_git_submodule ()$/;"	f
_git_svn	.git-completion.bash	/^_git_svn ()$/;"	f
_git_switch	.git-completion.bash	/^_git_switch ()$/;"	f
_git_tag	.git-completion.bash	/^_git_tag ()$/;"	f
_git_whatchanged	.git-completion.bash	/^_git_whatchanged ()$/;"	f
_git_worktree	.git-completion.bash	/^_git_worktree ()$/;"	f
_have	scripts/zet	/^_have(){ type "$1" &>\/dev\/null; }$/;"	f
_help_title	scripts/zet	/^_help_title() {$/;"	f
_initialize	scripts/zet	/^_initialize() {$/;"	f
_jsonstr	scripts/zet	/^_jsonstr() {$/;"	f
_newest	scripts/zet	/^_newest() {$/;"	f
_reduce	scripts/zet	/^_reduce() {$/;"	f
_select_zet	scripts/zet	/^_select_zet() {$/;"	f
_trim	scripts/zet	/^_trim() {$/;"	f
_urlencode	scripts/zet	/^_urlencode() {$/;"	f
add_all_fish	scripts/fish	/^sub add_all_fish {$/;"	s
add_all_seaweed	scripts/fish	/^sub add_all_seaweed {$/;"	s
add_big_fish	scripts/fish	/^sub add_big_fish {$/;"	s
add_bubble	scripts/fish	/^sub add_bubble {$/;"	s
add_castle	scripts/fish	/^sub add_castle {$/;"	s
add_dolphins	scripts/fish	/^sub add_dolphins {$/;"	s
add_ducks	scripts/fish	/^sub add_ducks {$/;"	s
add_environment	scripts/fish	/^sub add_environment {$/;"	s
add_fish	scripts/fish	/^sub add_fish {$/;"	s
add_fishhook	scripts/fish	/^sub add_fishhook {$/;"	s
add_monster	scripts/fish	/^sub add_monster {$/;"	s
add_seaweed	scripts/fish	/^sub add_seaweed {$/;"	s
add_shark	scripts/fish	/^sub add_shark {$/;"	s
add_ship	scripts/fish	/^sub add_ship {$/;"	s
add_splat	scripts/fish	/^sub add_splat {$/;"	s
add_swan	scripts/fish	/^sub add_swan {$/;"	s
add_whale	scripts/fish	/^sub add_whale {$/;"	s
attach_mappings	nvim/config/lua/cherry/telescope/mappings.lua	/^    attach_mappings = function(_, map)$/;"	f
attatch_to_first_session	scripts/ta	/^ attatch_to_first_session() {$/;"	f
bg	tmux/.tmux.conf	/^set -g status-style "bg=#202021,fg=#665c54"$/;"	k
bubble_collision	scripts/fish	/^sub bubble_collision {$/;"	s
buffers	nvim/config/lua/cherry/telescope/mappings.lua	/^local function buffers()$/;"	f
calc_diff	scripts/agendanotify	/^def calc_diff(t_curr, t_event):$/;"	f
callback	awesome/config/widgets/battery.lua	/^  callback = function()$/;"	f
center	scripts/fish	/^sub center {$/;"	s
changed	scripts/changed	/^changed () {$/;"	f
cherry	nvim/config/after/plugin/autocmds.vim	/^augroup cherry$/;"	a
cleanup	scripts/agendanotify	/^def cleanup(done, newlist):$/;"	f
config	nvim/config/lua/cherry/plugins.lua	/^      config = function()$/;"	f
convert	scripts/agendanotify	/^def convert(t):$/;"	f
create_detached_session	scripts/ta	/^create_detached_session() {$/;"	f
create_if_needed_and_attach	scripts/ta	/^create_if_needed_and_attach() {$/;"	f
currtime	scripts/agendanotify	/^    currtime = convert(time.strftime("%H:%M"))$/;"	v
db	scripts/project	/^db () {$/;"	f
debian	scripts/run	/^debian () {$/;"	f
definition	.git-completion.bash	/^			\\(\\))   : skip parens of shell function definition ;;$/;"	f
dequote	.git-completion.bash	/^	function dequote(p,    bs_idx, out, esc, esc_idx, dec) {$/;"	f
dprint	scripts/fish	/^sub dprint {$/;"	s
edit	scripts/track	/^edit () {$/;"	f
erase	scripts/track	/^erase () {$/;"	f
error_msg	nvim/config/plugin/packer_compiled.lua	/^local no_errors, error_msg = pcall(function()$/;"	f
events	scripts/agendanotify	/^    events = [l.strip() for l in get(["calcurse", "-a"]).splitlines()][1:]$/;"	v
expand	nvim/config/lua/cherry/completion.lua	/^      expand = function(args)$/;"	f
f	nvim/config/after/plugin/luasnip.lua	/^local f = ls.function_node$/;"	f
fg	tmux/.tmux.conf	/^set -g pane-active-border-style "fg=#202020,bg=#202020"$/;"	k
fg	tmux/.tmux.conf	/^set -g pane-border-style "fg=#202020,bg=#202020"$/;"	k
fish_callback	scripts/fish	/^sub fish_callback {$/;"	s
fish_collision	scripts/fish	/^sub fish_collision {$/;"	s
fishhook_cb	scripts/fish	/^sub fishhook_cb {$/;"	s
g:UltiSnipsEditSplit	vim/config/plugin/snippets.vim	/^let g:UltiSnipsEditSplit="vertical"$/;"	v
g:UltiSnipsExpandTrigger	vim/config/plugin/snippets.vim	/^let g:UltiSnipsExpandTrigger="<c-l>"$/;"	v
g:UltiSnipsJumpBackwardTrigger	vim/config/plugin/snippets.vim	/^let g:UltiSnipsJumpBackwardTrigger="<c-j>"$/;"	v
g:UltiSnipsJumpForwardTrigger	vim/config/plugin/snippets.vim	/^let g:UltiSnipsJumpForwardTrigger="<c-k>"$/;"	v
g:UltiSnipsSnippetDirectories	vim/config/plugin/snippets.vim	/^let g:UltiSnipsSnippetDirectories=["UltiSnips", "mysnippets"]$/;"	v
g:UltiSnipsSnippetsDir	vim/config/plugin/snippets.vim	/^let g:UltiSnipsSnippetsDir = "~\/.vim\/mysnippets"$/;"	v
g:andrews_nerdtree_all	vim/config/plugin/nerdtree.vim	/^let g:andrews_nerdtree_all = 1$/;"	v
g:dotoo#agenda#files	vim/config/after/plugin/dotoo.vim	/^let g:dotoo#agenda#files = ['~\/org\/*.dotoo']$/;"	v
g:dotoo#agenda#files	vim/config/plugin/dotoo.vim	/^let g:dotoo#agenda#files = ['~\/org\/*.dotoo']$/;"	v
g:dotoo#capture#refile	vim/config/after/plugin/dotoo.vim	/^let g:dotoo#capture#refile = expand('~\/org\/refile.dotoo')$/;"	v
g:dotoo#capture#refile	vim/config/plugin/dotoo.vim	/^let g:dotoo#capture#refile = expand('~\/org\/refile.dotoo')$/;"	v
g:easycomplete_tab_trigger	vim/config/plugin/completion.vim	/^let g:easycomplete_tab_trigger="<c-space>"$/;"	v
g:prettier#autoformat	vim/config/after/plugin/prettier.vim	/^let g:prettier#autoformat = 1$/;"	v
g:prettier#autoformat_require_pragma	vim/config/after/plugin/prettier.vim	/^let g:prettier#autoformat_require_pragma = 0$/;"	v
g:rehash256	vim/config/plugin/colors.vim	/^let g:rehash256 = 1$/;"	v
generator	nvim/config/after/plugin/statusline.lua	/^local generator = function()$/;"	f
get	scripts/agendanotify	/^def get(command):$/;"	f
get_format	scripts/twitch-view	/^sub get_format {$/;"	s
gf	nvim/config/plugin/gf-resolution.vim	/^noremap <silent>gf :call Gf()<CR>$/;"	m
github	scripts/github	/^github () {$/;"	f
group_death	scripts/fish	/^sub group_death {$/;"	s
groups	scripts/agendanotify	/^    groups = []; sub = []$/;"	v
handle	scripts/fish	/^sub handle {$/;"	s
haschanged	scripts/haschanged	/^haschanged () {$/;"	f
init_random_objects	scripts/fish	/^sub init_random_objects {$/;"	s
initialize	scripts/fish	/^sub initialize {$/;"	s
is_vim	tmux/.tmux.conf	/^is_vim="ps -o state= -o comm= -t '#{pane_tty}' \\$/;"	k
lami	scripts/run	/^lami () {$/;"	f
log	scripts/track	/^log () {$/;"	f
log_raw	scripts/track	/^log_raw () {$/;"	f
main	scripts/fish	/^sub main {$/;"	s
mapleader	vim/config/vimrc	/^let mapleader = " "$/;"	v
not_in_tmux	scripts/ta	/^not_in_tmux() {$/;"	f
on_attach	nvim/config/lua/cherry/lsp.lua	/^local on_attach = function(client, bufnr)$/;"	f
onchange	scripts/onchange	/^onchange () {$/;"	f
pick_one	scripts/twitch-view	/^sub pick_one {$/;"	s
preview_width	nvim/config/lua/cherry/telescope/setup.lua	/^        preview_width = function(_, cols, _)$/;"	f
quit	scripts/fish	/^sub quit {$/;"	s
rand_color	scripts/fish	/^sub rand_color {$/;"	s
random_object	scripts/fish	/^sub random_object {$/;"	s
rawurlencode	scripts/urlencode	/^rawurlencode() {$/;"	f
retract	scripts/fish	/^sub retract {$/;"	s
run	scripts/project	/^run () {$/;"	f
s:QuitWindow	vim/config/plugin/mappings.vim	/^function s:QuitWindow() abort$/;"	f
save_profiles	nvim/config/plugin/packer_compiled.lua	/^local function save_profiles(threshold)$/;"	f
session_exists	scripts/ta	/^session_exists() {$/;"	f
set_prompt_to_entry_value	nvim/config/lua/cherry/telescope/setup.lua	/^local set_prompt_to_entry_value = function(prompt_bufnr)$/;"	f
set_wallpaper	awesome/config/rc.lua	/^local function set_wallpaper(s)$/;"	f
show_time	scripts/agendanotify	/^def show_time(event, s = ""):$/;"	f
sighandler	scripts/fish	/^sub sighandler {$/;"	s
snip	scripts/snip	/^snip() {$/;"	f
snippet	scripts/snip	/^snippet() {$/;"	f
span	scripts/agendanotify	/^            span = calc_diff(currtime, item[0])$/;"	v
split	nvim/config/lua/util/string/split.lua	/^function M:split(inputstr, sep)$/;"	f	unknown:M
start	scripts/track	/^start () {$/;"	f
startups	scripts/agendanotify	/^    startups = cleanup(startups, groups); times = cleanup(times, groups)$/;"	v
startups	scripts/agendanotify	/^startups = []; times = []$/;"	v
status	scripts/track	/^status () {$/;"	f
stop	scripts/track	/^stop () {$/;"	f
style fg	tmux/.tmux.conf	/^set-window-option -g window-status-current-style fg=yellow$/;"	k
sub	scripts/agendanotify	/^            sub = []$/;"	v
sub	scripts/agendanotify	/^    groups = []; sub = []$/;"	v
switch	scripts/project	/^switch () {$/;"	f
switchProjects	nvim/config/lua/cherry/telescope/mappings.lua	/^local function switchProjects()$/;"	f
time	nvim/config/plugin/packer_compiled.lua	/^    time = function(chunk, start) end$/;"	f
time	nvim/config/plugin/packer_compiled.lua	/^    time = function(chunk, start)$/;"	f
times	scripts/agendanotify	/^    startups = cleanup(startups, groups); times = cleanup(times, groups)$/;"	v
times	scripts/agendanotify	/^startups = []; times = []$/;"	v
tmux_version	tmux/.tmux.conf	/^tmux_version='$(tmux -V | sed -En "s\/^tmux ([0-9]+(.[0-9]+)?).*\/\\1\/p")'$/;"	k
try_loadstring	nvim/config/plugin/packer_compiled.lua	/^local function try_loadstring(s, component, name)$/;"	f
usage	scripts/twitch-view	/^sub usage {$/;"	s
warn	scripts/agendanotify	/^warn = int(sys.argv[1])$/;"	v
wiki	scripts/wiki	/^wiki () {$/;"	f
x.after	scripts/zet	/^x.after() {$/;"	f
x.before	scripts/zet	/^x.before() {$/;"	f
x.body	scripts/zet	/^x.body() {$/;"	f
x.cast.category	scripts/zet	/^x.cast.category() { x.config cast.category "$@"; }$/;"	f
x.cast.footer	scripts/zet	/^x.cast.footer() { x.config cast.footer "$@"; }$/;"	f
x.categories	scripts/zet	/^x.categories() {$/;"	f
x.category	scripts/zet	/^x.category() {$/;"	f
x.cd	scripts/zet	/^x.cd () {$/;"	f
x.codeless	scripts/zet	/^x.codeless() {$/;"	f
x.commit	scripts/zet	/^x.commit() {$/;"	f
x.config	scripts/zet	/^x.config() {$/;"	f
x.count	scripts/zet	/^x.count() { mapfile ids < <(x.ids); echo "${#ids[@]}"; }$/;"	f
x.create	scripts/zet	/^x.create() {$/;"	f
x.current	scripts/zet	/^x.current() { echo "${CONF[current]}"; }$/;"	f
x.current	scripts/zet	/^x.current() { x.config current "$@"; }$/;"	f
x.delete	scripts/zet	/^x.delete() {$/;"	f
x.dex.changes	scripts/zet	/^x.dex.changes() {$/;"	f
x.dex.tags	scripts/zet	/^x.dex.tags() {$/;"	f
x.dex.titles	scripts/zet	/^x.dex.titles() {$/;"	f
x.dir	scripts/zet	/^x.dir() {$/;"	f
x.dones	scripts/zet	/^x.dones() { $/;"	f
x.download.directory	scripts/zet	/^x.download.directory() { x.config download.directory "$@"; }$/;"	f
x.edit	scripts/zet	/^x.edit() {$/;"	f
x.find	scripts/zet	/^x.find() { x.dex.titles | grep -iP "$*"; }$/;"	f
x.for	scripts/zet	/^x.for() {$/;"	f
x.get	scripts/zet	/^x.get() {$/;"	f
x.help	scripts/zet	/^x.help() { $/;"	f
x.id	scripts/zet	/^x.id() {$/;"	f
x.ids	scripts/zet	/^x.ids() {$/;"	f
x.import	scripts/zet	/^x.import() {$/;"	f
x.isodate	scripts/zet	/^x.isodate() { date -u +%Y-%m-%d "$@"; }$/;"	f
x.isonan	scripts/zet	/^x.isonan() { date -u +%Y%m%d%H%M%S%N "$@"; }$/;"	f
x.isosec	scripts/zet	/^x.isosec() { date -u +%Y%m%d%H%M%S "$@"; }$/;"	f
x.last	scripts/zet	/^x.last() {$/;"	f
x.link	scripts/zet	/^x.link() { x.find "$*" | x.mark.link; }$/;"	f
x.mark.link	scripts/zet	/^x.mark.link() {$/;"	f
x.mark.url	scripts/zet	/^x.mark.url() {$/;"	f
x.open	scripts/zet	/^x.open() { $/;"	f
x.post	scripts/zet	/^x.post() {$/;"	f
x.query	scripts/zet	/^x.query() {$/;"	f
x.queryopen	scripts/zet	/^x.queryopen() {$/;"	f
x.readme	scripts/zet	/^x.readme() {$/;"	f
x.screenshot	scripts/zet	/^x.screenshot() {$/;"	f
x.screenshot.directory	scripts/zet	/^x.screenshot.directory() { x.config screenshot.directory "$@"; }$/;"	f
x.source	scripts/zet	/^x.source() {$/;"	f
x.tags	scripts/zet	/^x.tags() {$/;"	f
x.text	scripts/zet	/^x.text() {$/;"	f
x.title	scripts/zet	/^x.title() {$/;"	f
x.today	scripts/zet	/^x.today () {$/;"	f
x.todos	scripts/zet	/^x.todos() { $/;"	f
x.url	scripts/zet	/^x.url() {$/;"	f
x.urlencode	scripts/zet	/^x.urlencode() {$/;"	f
x.usage	scripts/zet	/^x.usage() {$/;"	f
x.use	scripts/zet	/^x.use() {$/;"	f
x.video	scripts/zet	/^x.video() {$/;"	f
x.view	scripts/zet	/^x.view () {$/;"	f
x.zet.private	scripts/zet	/^x.zet.private() { x.config zet.private "$@"; }$/;"	f
x.zet.public	scripts/zet	/^x.zet.public() { x.config zet.public "$@"; }$/;"	f
