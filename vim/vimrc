" Load plugins
packadd vim-commentary
packadd vim-surround
packadd vim-vinegar
if has('nvim')
  packadd colorbuddy.nvim
  packadd gruvbuddy.nvim
  packadd conjure
  packadd nvim-treesitter
endif
" vim-tiny lacks 'eval'
if has("eval")
  let skip_defaults_vim = 1
endif
let maplocalleader=","
set nocompatible
set autoindent " automatically indent new lines
set t_Co=256 " use 256 colors
set autoread " stop asking me to load file with W11, just load it
set autowrite " automatically write files when changing when multiple files open
set ruler " see ruf for formatting
set showmode " show command and insert mode
set t_vb= " disable visual bell (also disable in .inputrc)
set tabstop=2 " mostly used with >> and <<
set softtabstop=2 " mostly used with >> and <<
set shiftwidth=2 " mostly used with >> and <<
set smartindent " mostly used with >> and <<
set smarttab " mostly used with >> and <<
set expandtab " replace tabs with spaces automatically 
set splitright " fix splits
set splitbelow " fix splits
set number " Enable line number
set relativenumber " Show line numbers based on current one
if has('nvim')
  set clipboard=unnamedplus " Set the clipboard to use system.
  set guicursor= " Reset cursor on neovim, why its so annoying
  set laststatus=3 " Show statusbar only on bottom
  set winbar=%f\ %m
endif
if v:version >= 800
  set nofixendofline " stop vim from silently messing with files that it shouldn't
  set listchars=space:*,trail:*,nbsp:*,extends:>,precedes:<,tab:\|> " better ascii friendly listchars
  set foldmethod=indent
  set nofoldenable
endif
match IncSearch '\s\+$' " mark trailing spaces as errors
set textwidth=72 " enough for line numbers + gutter within 80 standard
set completeopt+=noselect " make completion not select the first option
set completeopt+=noinsert " make completion not select the first option
set completeopt+=menuone " make completion not select the first option
set nobackup " more risky, but cleaner
set noswapfile " more risky, but cleaner
set nowritebackup " more risky, but cleaner
set hlsearch " highlight search hits
set incsearch " highlight search hits
set linebreak " highlight search hits
set shortmess=aoOtTIc " avoid most of the 'Hit Enter ...' messages
set viminfo='20,<1000,s1000 " prevents truncated yanks, deletes, etc.
set wrapscan " wrap around when searching
set backspace=indent,eol,start " required for mac delete to work
set hidden " stop complaints about switching buffer with changes
if executable("rg")
  set grepprg=rg\ --vimgrep\ --smart-case\ --hidden
  set grepformat=%f:%l:%c:%m
endif
nnoremap [q <cmd>cprev<cr>
nnoremap ]q <cmd>cnext<cr>
set history=100 " command history
if has("syntax")
  syntax enable " here because plugins and stuff need it
endif
set ttyfast " faster scrolling
filetype plugin on " allow sensing the filetype
autocmd InsertEnter * let save_cwd = getcwd() | set autochdir " This fixes the relative file completion only on insert mode(to not mess up with :e command)
autocmd InsertLeave * set noautochdir | execute 'cd' fnameescape(save_cwd) 
map Y y$
set wildmenu " better command-line completion
if !has('nvim')
  " disable search highlighting with <C-L> when refreshing screen
  nnoremap <C-l> :nohl<CR><C-L>
endif
" improve `gf`
autocmd bufnewfile,bufread *.tsx,*.ts nnoremap <silent> gf :call <sid>open_file_or_create_new()<CR>

function! s:open_file_or_create_new() abort
  if expand('%:e') == 'ts'
    let l:path = expand('<cfile>') . '.' . expand('%:e')
  else
    let l:path = expand('<cfile>')
  endif

  if empty(l:path)
    return
  endif

  try
    exe 'norm!gf'
  catch /.*/
    echo 'New file.'
    let l:new_path = fnamemodify(expand('%:p:h') . '/' . l:path, ':p')
    echo l:new_path
    if !empty(fnamemodify(l:new_path, ':e')) "Edit immediately if file has extension
      return execute('edit '.l:new_path)
    endif

    let l:suffixes = split(&suffixesadd, ',')

    for l:suffix in l:suffixes
      if filereadable(l:new_path.l:suffix)
        return execute('edit '.l:new_path.l:suffix)
      endif
    endfor

    return execute('edit '.l:new_path.l:suffixes[0])
  endtry
endfunction

if has('nvim')
" STATUSLINE
lua << EOF
local reset_group = vim.api.nvim_create_augroup('reset_group', {
  clear = false,
})
-- ==================
--     Statusline
-- ==================
vim.api.nvim_create_autocmd({ 'BufEnter', 'CursorHold', 'CursorHoldI' }, {
  desc = 'word count for the statusline',
  pattern = { '*.md', '*.txt' },
  callback = function()
    local wc = vim.fn.wordcount().words
    if wc == 0 then
      vim.b.wordcount = ''
    elseif wc == 1 then
      vim.b.wordcount = '| ' .. wc .. ' word'
    else
      vim.b.wordcount = '| ' .. wc .. ' words'
    end
  end,
  group = init_group,
})

vim.api.nvim_create_autocmd({ 'BufEnter', 'CursorHold', 'FocusGained' }, {
  desc = 'git branch and LSP errors for the statusline',
  callback = function()
    if vim.fn.isdirectory '.git' ~= 0 then
      -- always runs in the current directory, rather than in the buffer's directory
      local branch = vim.fn.system "git branch --show-current | tr -d '\n'"
      vim.b.branch_name = '  ' .. branch .. ' '
    end

    local num_errors = #vim.diagnostic.get(0, { severity = vim.diagnostic.severity.ERROR })
    -- if there are any errors only show the error count, don't include the number of warnings
    if num_errors > 0 then
      vim.b.errors = '  ' .. num_errors .. ' '
      return
    end
    -- otherwise show amount of warnings, or nothing if there aren't any
    local num_warnings = #vim.diagnostic.get(0, { severity = vim.diagnostic.severity.WARN })
    if num_warnings > 0 then
      vim.b.errors = '  ' .. num_warnings .. ' '
      return
    end
    vim.b.errors = ''
  end,
  group = init_group,
})

vim.opt.statusline =
  [[%{get(b:, "branch_name", "")} %{get(b:, "errors", "")} %{get(b:, "wordcount", "")}]]
EOF

" TREESITTER
lua << EOF
local ok, treesitter = pcall(require, 'nvim-treesitter.configs')

if ok then
  treesitter.setup {
    ensure_installed = {"lua", "tsx", "typescript", "json", "html", "css"},
    sync_install = false,
    highlight = {
      enable = true,
      -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
      -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
      -- Using this option may slow down your editor, and you may see some duplicate highlights.
      -- Instead of true it can also be a list of languages
      additional_vim_regex_highlighting = false,
    }
  }
end
EOF

" COLORBUDDY
lua << EOF
local ok, colorbuddy = pcall(require, 'colorbuddy')

if ok then
  colorbuddy.colorscheme('gruvbuddy')
end
EOF
endif

if exists('*matchfuzzy')
  function! FilesPicker(A,L,P) abort
    if stridx(system('git status'), "not in")
      if !executable('fd')
        echoerr "Please install fd for non git repositories"
        return
      endif

      let l:cmd = 'fd . -t f'
    else
      let l:cmd = 'git ls-files'
    endif

    let l:items = l:cmd->systemlist()
    if a:A->len() > 0
      return l:items->matchfuzzy(a:A)
    else
      return l:items
    endif
  endfunction

  function! FilesEdit(args) abort
    exe 'e ' .. a:args
  endfunction

  function! FilesVEdit(args) abort
    exe 'vs ' .. a:args
  endfunction

  function! FilesSEdit(args) abort
    exe 'sp ' .. a:args
  endfunction

  function! FilesTEdit(args) abort
    exe 'tabe ' .. a:args
  endfunction

  command! -nargs=1 -bar -complete=customlist,FilesPicker F call FilesEdit(<q-args>)
  command! -nargs=1 -bar -complete=customlist,FilesPicker V call FilesVEdit(<q-args>)
  command! -nargs=1 -bar -complete=customlist,FilesPicker S call FilesSEdit(<q-args>)
  command! -nargs=1 -bar -complete=customlist,FilesPicker T call FilesTEdit(<q-args>)
endif
