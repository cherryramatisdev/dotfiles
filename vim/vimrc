" vim-tiny lacks 'eval'
if has("eval")
  let skip_defaults_vim = 1
endif

let mapleader=' '

set nocompatible

" automatically indent new lines
set autoindent

" use 256 colors
set t_Co=256

" stop asking me to load file with W11, just load it
set autoread

" automatically write files when changing when multiple files open
set autowrite

" turn col and row position on in bottom right
set ruler " see ruf for formatting

" show command and insert mode
set showmode

" disable visual bell (also disable in .inputrc)
set t_vb=

" mostly used with >> and <<
set tabstop=2
set softtabstop=2
set shiftwidth=2
set smartindent
set smarttab
" replace tabs with spaces automatically
set expandtab

" fix splits
set splitright
set splitbelow

" Hide Status Line
set laststatus=0 " For some reason this doesnt work
autocmd BufRead,BufNewFile * set laststatus=0 " This will work instead

if v:version >= 800
  " stop vim from silently messing with files that it shouldn't
  set nofixendofline

  " better ascii friendly listchars
  set listchars=space:*,trail:*,nbsp:*,extends:>,precedes:<,tab:\|>

  set foldmethod=indent
  set nofoldenable

  " Toggle fold
  nnoremap <CR> za
  vnoremap <CR> za

  " Open all folds
  nnoremap <leader><CR> zR
endif

" mark trailing spaces as errors
match IncSearch '\s\+$'

" enough for line numbers + gutter within 80 standard
set textwidth=72

" disable relative line numbers, remove no to sample it
set norelativenumber

" makes ~ effectively invisible
highlight NonText guifg=bg

" make completion not select the first option
set completeopt+=noselect
set completeopt+=noinsert
set completeopt+=menuone

" more risky, but cleaner
set nobackup
set noswapfile
set nowritebackup

set icon

" highlight search hits
set hlsearch
set incsearch
set linebreak

" avoid most of the 'Hit Enter ...' messages
set shortmess=aoOtTIc

" prevents truncated yanks, deletes, etc.
set viminfo='20,<1000,s1000

" not a fan of bracket matching
if has("eval") " vim-tiny detection
  let g:loaded_matchparen=1
endif
set noshowmatch

" wrap around when searching
set wrapscan

" required for mac delete to work
set backspace=indent,eol,start

" stop complaints about switching buffer with changes
set hidden

" configure path for fuzzy finding like experience
set path+=**
set wildignore=**/node_modules/**,**/.git/**,**/dist/**
if executable("rg")
  set grepprg=rg\ --vimgrep\ --smart-case\ --hidden
  set grepformat=%f:%l:%c:%m
endif

" mappings to navigate quickfix list
nnoremap [q <cmd>cprev<cr>
nnoremap ]q <cmd>cnext<cr>

" command history
set history=100

" here because plugins and stuff need it
if has("syntax")
  syntax enable
endif

" faster scrolling
set ttyfast

" allow sensing the filetype
filetype plugin on

set cinoptions+=:0

" Edit/Reload vimr configuration file
nnoremap confe :e $HOME/.vimrc<CR>
nnoremap confr :source $HOME/.vimrc<CR>

set ruf=%30(%=%#LineNr#%.50F\ [%{strlen(&ft)?&ft:'none'}]\ %l:%c\ %p%%%)

" only load plugins if Plug detected
if filereadable(expand("~/.vim/autoload/plug.vim"))
  call plug#begin('~/.local/share/vim/plugins')
  Plug 'vim-pandoc/vim-pandoc'
  Plug 'rwxrob/vim-pandoc-syntax-simple'
  Plug 'leafgarland/typescript-vim'
  Plug 'peitalin/vim-jsx-typescript'

  Plug 'lifepillar/vim-mucomplete'
  Plug 'tpope/vim-fugitive' " Em obs
  Plug 'christoomey/vim-conflicted' " Em obs
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-vinegar'
  Plug 'prettier/vim-prettier', {
        \ 'do': 'yarn install --frozen-lockfile --production',
        \ 'for': ['javascript', 'javascriptreact', 'typescript', 'typescriptreact', 'css', 'json', 'markdown', 'html'] }

  Plug 'romainl/vim-qf'
  Plug 'pbrisbin/vim-mkdir'
  Plug 'ludovicchabant/vim-gutentags'
  Plug 'kristijanhusak/vim-js-file-import', {'do': 'npm install'}
  Plug 'NLKNguyen/papercolor-theme'
  call plug#end()

  let g:gutentags_ctags_extra_args=['--exclude=dist']
  let g:diffget_local_map = 'gl'
  let g:diffget_upstream_map = 'gu'
  let g:qf_mapping_ack_style = 1

  nnoremap gr <cmd>JsFindUsage<cr>
  set tagfunc=jsfileimport#tagfunc

	set complete-=i
	set complete-=t
  let g:mucomplete#chains = {}
  let g:mucomplete#chains.default = ['omni', 'path', 'c-p', 'tags']

  set background=light
  colorscheme PaperColor

  function ColorSwitch() abort
    if &background == 'light'
      set background=dark
    else
      set background=light
    endif
  endfunction

  nnoremap <leader>p <cmd>PrettierAsync<cr>
else
  autocmd vimleavepre *.go !gofmt -w % " backup if fatih fails
endif

autocmd bufnewfile,bufread *.spec.ts compiler jest
nnoremap <leader>tf :make %<cr>
nnoremap <leader>ta :make<cr>

" This fixes the relative file completion only on insert mode(to not
" mess up with :e command)
" NOTE: I'm using mucomplete now, but this is still useful
" autocmd InsertEnter * let save_cwd = getcwd() | set autochdir
" autocmd InsertLeave * set noautochdir | execute 'cd' fnameescape(save_cwd)

" make Y consitent with D and C (yank til end)
map Y y$

" better command-line completion
set wildmenu

" disable search highlighting with <C-L> when refreshing screen
nnoremap <C-l> :nohl<CR><C-L>

" enable omni-completion
set omnifunc=syntaxcomplete#Complete

"fix bork bash detection
if has("eval")  " vim-tiny detection
  fun! s:DetectBash()
    if getline(1) == '#!/usr/bin/bash' || getline(1) == '#!/bin/bash' || getline(1) == '#!/bin/sh'
      set ft=sh
      set shiftwidth=2
    endif
  endfun
  autocmd BufNewFile,BufRead * call s:DetectBash()
endif

" displays all the syntax rules for current position, useful
" when writing vimscript syntax plugins
if has("syntax")
  function! <SID>SynStack()
    if !exists("*synstack")
      return
    endif
    echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
  endfunc
endif

" start at last place you were editing
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

nmap <leader>2 :set paste<CR>i

" improve `gf`
autocmd bufnewfile,bufread *.tsx,*.ts nnoremap <silent> gf :call <sid>open_file_or_create_new()<CR>

function! s:open_file_or_create_new() abort
  if expand('%:e') == 'ts'
    let l:path = expand('<cfile>') . '.' . expand('%:e')
  else
    let l:path = expand('<cfile>')
  endif

  if empty(l:path)
    return
  endif

  try
    exe 'norm!gf'
  catch /.*/
    echo 'New file.'
    let l:new_path = fnamemodify(expand('%:p:h') . '/' . l:path, ':p')
    echo l:new_path
    if !empty(fnamemodify(l:new_path, ':e')) "Edit immediately if file has extension
      return execute('edit '.l:new_path)
    endif

    let l:suffixes = split(&suffixesadd, ',')

    for l:suffix in l:suffixes
      if filereadable(l:new_path.l:suffix)
        return execute('edit '.l:new_path.l:suffix)
      endif
    endfor

    return execute('edit '.l:new_path.l:suffixes[0])
  endtry
endfunction

" Navigate splits
nnoremap gs <C-w>s
nnoremap gv <C-w>v
nnoremap go <C-w>o

nnoremap gh <C-w>h
nnoremap gj <C-w>j
nnoremap gk <C-w>k
nnoremap gl <C-w>l

" read personal/private vim configuration (keep last to override)
set rtp^=~/.vimpersonal
set rtp^=~/.vimprivate
set rtp^=~/.vimwork
