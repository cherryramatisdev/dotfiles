:PROPERTIES:
:ID:       36592050-57aa-4f34-a98f-6d7ee7e8b074
:END:
#+title: best way to get environment variable nextjs

* Started
Loading Environment Variables
Next.js has built-in support for loading environment variables from *.env.local* into process.env.

An example *.env.local*:

#+BEGIN_SRC
DB_HOST=localhost
DB_USER=myuser
DB_PASS=mypassword
#+END_SRC

** 1.
The basic option here is to use `getStaticProps`  to get environment variable and return as props to the component

- TODO Criar um hook para retornar esses dados
	This is not possible because we can only use getStaticProps on pages
        #+DOWNLOADED: screenshot @ 2021-10-11 21:48:28
	[[file:Started/2021-10-11_21-48-28_screenshot.png]]

	
#+BEGIN_QUOTE 
This need to be used on a page inside *pages/index.js*
#+END_QUOTE

#+BEGIN_SRC typescript
export async function getStaticProps() {
  return {
    props: {
      cloudName: process.env.CLOUD_NAME,
      apiKey: process.env.API_KEY,
      apiSecret: process.env.API_SECRET,
      presetName: process.env.PRESET_NAME
    }
  }
}
#+END_SRC

** 2. The winner

This solution is using api feature from next to load stuff on server side, the idea is to create an api route to return those environment variable and get them using *swr*

**pages/api/cloudinary.ts**

#+BEGIN_SRC typescript
export default function handler(req, res) {
  res.status(200).json({
     cloudName: process.env.CLOUD_NAME,
     apiKey: process.env.API_KEY,
     apiSecret: process.env.API_SECRET,
     presetName: process.env.PRESET_NAME
  })
}
#+END_SRC

**component/Prescription/index.tsx**

#+BEGIN_SRC typescript
export const Prescription: React.FC = () => {
  const fetcher = axiosFactory();
  const { data, error } = useSWR('prod.lamimed.it/api/cloudinary', fetcher.get.bind(fetcher));
  
  if (error) console.error(error)
  
  return (
    <div>
	  {data?.cloudName}
	  {data?.apiKey}
	  {data?.apiSecret}
	  {data?.presetName}
	</div>
  )
}
#+END_SRC
