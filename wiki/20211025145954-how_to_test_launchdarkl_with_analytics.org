:PROPERTIES:
:ID:       487fc8d9-ba6f-488b-aa95-3a4393df569e
:END:
#+title: how to test launchdarkl with analytics

* Introduction
Launchdarkly is an tool that provide feature flags, so that we can AB
Test features, deliver for specific users, etc...

* Using flags
Flags can be any primitive type essentially(for that reason we get
=any= when using it).
To get a flag it's pretty easy, you just need to use hook provided by
launchdarkly SDK as shown below.

#+BEGIN_SRC typescript
  import React from 'react'
  import { useFlags } from 'launchdarkly-react-client-sdk';

  export const TestPage: React.FC = () => {
      const flagObj = useFlags()

      return (
	  <>
	      <div>Titulo</div>
	      {flagObj.test === 'Testando1' && (
		  <div>A scenario here</div>
	      )}

	      {flagObj.test === 'Testando2' && (
		  <div>B scenario here</div>
	      )}
	  </>
      )
  }
#+END_SRC

It's important to check launchdarkly structure to know how this flags
will come

#+DOWNLOADED: screenshot @ 2021-10-25 15:07:05
[[file:Using_flags/2021-10-25_15-07-05_screenshot.png]]

Here we can check that both variation are strings containing
=Testando1= and =Testando2=

* Integration with google analytics
Since we can't use Heap direct integration right now, we'll use with
analytics. We'll only be careful about naming dataLayers and data
attributes to get a good visualization

Below is a window with google tag manager connected with localhost
application, as we click on "Avvia chat" button loaded by the scenario
'Testando1' it store a new item on =window.dataLayer= containing the
event name =test-chat-button-clicked=

#+DOWNLOADED: screenshot @ 2021-10-25 15:16:33
[[file:Integration_with_google_analytics/2021-10-25_15-16-33_screenshot.png]]

This is the code written for this result too:

#+BEGIN_SRC typescript
  import Image from 'next/image';
  import Link from 'next/link';
  import {
    Divider,
    Grid,
    MediaMatch,
    Typography,
    Button,
    useViewport,
  } from '@lamimed/pantheon';

  import { Footer } from 'components/Footer';
  import TextWrapper from 'components/TextWrapper';
  import { MainCallToAction } from 'components/MainCallToAction';
  import { Navigation } from 'components/Navigation';

  import { AboutUs } from './containers/AboutUs';
  import { Categories } from './containers/Categories';

  import * as S from './styles';
  import { useFlags } from 'launchdarkly-react-client-sdk';

  const Home: React.FC = () => {
    const teste = useFlags();
    const { greaterThan } = useViewport();

    const clicked = () => {
      const dataLayer = (window as any).dataLayer || [];

      dataLayer.push({
	event: 'test-chat-button-clicked',
      });
    };

    return (
      <>
	{/* <Navigation /> */}

	<Grid.Wrapper>
	  {teste.test === 'Testando1' && (
	    <Button onClick={clicked}>Avvia chat</Button>
	  )}
	  <MainCallToAction as="header">
	    <Image
	      src="/images/illustration/hero-home-page.png"
	      alt="Hero"
	      width={370}
	      height={315}
	      quality={100}
	    />

	    <TextWrapper>
	      <Typography
		variant={greaterThan('tablet') ? 'heading_display' : 'heading_1'}
		color="text__highlight"
		as="h1"
	      >
		Il tuo medico di fiducia, ovunque tu sia.
	      </Typography>

	      <Typography as="h2">
		Un team di professionisti è qui per prendersi cura di te e dei
		tuoi cari. Visite mediche a domicilio e videoconsulti online.
		<S.SubtitleSpan>Con Lami, la salute è semplice.</S.SubtitleSpan>
	      </Typography>
	    </TextWrapper>
	  </MainCallToAction>
	</Grid.Wrapper>

	<MediaMatch lessThan="tablet">
	  <Divider position="above" />
	</MediaMatch>

	<Categories />

	<AboutUs />

	<Footer>
	  <Link href="https://info.lamimed.it/iscrizione-newsletter" passHref>
	    <S.LinkProxy>
	      <Button variant="outline" color="light" size="large" extended>
		Resta in contatto
	      </Button>
	    </S.LinkProxy>
	  </Link>
	  <Link href="/privacy-policy" passHref>
	    <S.LinkProxy>
	      <Button variant="outline" color="light" size="large" extended>
		Privacy policy
	      </Button>
	    </S.LinkProxy>
	  </Link>
	  <Link href="/termini-condizioni" passHref>
	    <S.LinkProxy>
	      <Button variant="outline" color="light" size="large" extended>
		Termini e condizioni
	      </Button>
	    </S.LinkProxy>
	  </Link>
	</Footer>
      </>
    );
  };

  export default Home;
#+END_SRC
