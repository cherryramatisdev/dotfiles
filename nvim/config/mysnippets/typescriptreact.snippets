global !p
# Capitalize the first letter without affecting the rest of the letters
def capitalize_first(word):
	if(word):
		word = word[0].upper() + word[1:]
	return word
endglobal

# Functional components
snippet rfc "react functional component" b
export const ${1:`!p snip.rv = snip.basename`}: React.FC = (${2}) => {
	return(
		<div>
			$0
		</div>
		)
}
endsnippet

snippet page "nextjs page" b
export const ${1:`!p snip.rv = snip.basename`}: React.FC = (${2}) => {
	return(
		<div>
			$0
		</div>
		)
}

export default $1
endsnippet
# React Hooks
snippet ush "useState Hook" b
const [${1}, set`!p snip.rv=capitalize_first(t[1])`] = useState(${3:"${4}"})
endsnippet
snippet usf "useEffect Hook" b
useEffect(() => {
	${1:${0}}
		}${2})
endsnippet
snippet usc "useContext Hook" b
const ${1:context} = useContext(${2})
endsnippet
snippet usr "useReducer Hook" b
const [${3:state}, ${4:dispatch}] = useReducer(${5:reducer}, ${2:initial_value})
endsnippet
snippet usC "useCallback(fn, inputs)" b
const ${1:callback} = useCallback((${2})) => ${3:{
	${4}
}}, [${5}])
endsnippet
snippet usem "useMemo(fn, inputs)" b
const ${1:memorized} = useMemo(() => ${2:{
	${3}
}}, [${4}])
endsnippet
snippet useR "useRef(defaultValue)" b
const ${1:ref} = useRef(${2:null})
endsnippet
snippet ir "import React"
import React from "react"
endsnippet
snippet irc "import React and Component"
import React, { Component } from "react"
endsnippet
